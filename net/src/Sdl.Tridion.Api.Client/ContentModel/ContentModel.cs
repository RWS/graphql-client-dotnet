// This file was generated by a tool on 25/10/2018 09:36:50
using System.Collections;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sdl.Tridion.Api.Client.ContentModel
{
	/// <summary>
	/// The query root for the GraphQL Public Content API.
	/// </summary>
	public class ContentQuery
	{
		/// <summary>
		/// Returns the binary component given its CM_URI (takes precedence over the other arguments).ONLY if CM_URI is not specified, the binary is identified by its namespaceId, publicationId and binaryId. Alternatively a binary varinat URL can be used instead of a binary ID.
		/// </summary>
		public BinaryComponent BinaryComponent { get; set; }

		/// <summary>
		/// Resolve a link by parameters.
		/// </summary>
		public Link BinaryLink { get; set; }

		/// <summary>
		/// Returns the categories for the given namespace and publication IDs.
		/// </summary>
		public KeywordConnection Categories { get; set; }

		/// <summary>
		/// Resolve a link by parameters.
		/// </summary>
		public Link ComponentLink { get; set; }

		/// <summary>
		/// Returns the component presentation given the namespace, publication, component and template IDs.
		/// </summary>
		public ComponentPresentation ComponentPresentation { get; set; }

		/// <summary>
		/// Get a list of component presentations filtered by set of criteria.
		/// </summary>
		public ComponentPresentationConnection ComponentPresentations { get; set; }

		/// <summary>
		/// Resolve a link by parameters.
		/// </summary>
		public Link DynamicComponentLink { get; set; }

		/// <summary>
		/// Get a list of items filtered by set of criteria.
		/// </summary>
		public ItemConnection Items { get; set; }

		/// <summary>
		/// Returns the keyword for the given namespace, publication, category and keyword IDs.
		/// </summary>
		public Keyword Keyword { get; set; }

		/// <summary>
		/// Returns the page given its CM_URI. Takes precedence over the other arguments.ONLY If CM_URI is not specified, the page is identified by its namespaceId, publicationId and pageId. Alternatively a page URL can be used instead of a page ID.
		/// </summary>
		public Page Page { get; set; }

		/// <summary>
		/// Resolve a link by parameters.
		/// </summary>
		public Link PageLink { get; set; }

		/// <summary>
		/// Returns the list of pages matching the provided namespace ID and page URL.
		/// </summary>
		public PageConnection Pages { get; set; }

		/// <summary>
		/// Returns the publication given the specified namespace and publication IDs.
		/// </summary>
		public Publication Publication { get; set; }

		/// <summary>
		/// Returns the publication mapping given the specified namespace and site URL.
		/// </summary>
		public PublicationMapping PublicationMapping { get; set; }

		/// <summary>
		/// Returns the list of publications given the namespace ID and an optional filter.
		/// </summary>
		public PublicationConnection Publications { get; set; }

		/// <summary>
		/// Returns the structure group for the given namespace, publication and structure group IDs.
		/// </summary>
		public StructureGroup StructureGroup { get; set; }

		/// <summary>
		/// Returns the structure groups for the given namespace and publication IDs.
		/// </summary>
		public StructureGroupConnection StructureGroups { get; set; }

		/// <summary>
		/// Get sitemap
		/// </summary>
		public TaxonomySitemapItem Sitemap { get; set; }

		/// <summary>
		/// Get sitemap subtree
		/// </summary>
		public List<TaxonomySitemapItem> SitemapSubtree { get; set; }
	}

	/// <summary>
	/// Represents a component which has binary content.
	/// </summary>
	public class BinaryComponent : IContentComponent, IItem
	{
		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		public string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		public CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		public string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		public Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		public string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		public int? OwningPublicationId { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Returns the schema ID for the component.
		/// </summary>
		public int? SchemaId { get; set; }

		/// <summary>
		/// Returns the list of taxonomies for the item.
		/// </summary>
		public List<ITaxonomyItem> Taxonomies { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Identifies the type of the binary component.
		/// </summary>
		public string Type { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		public string UpdatedDate { get; set; }

		/// <summary>
		/// Returns the variants of the binary component.
		/// </summary>
		public BinaryVariantConnection Variants { get; set; }

		/// <summary>
		/// Returns true if the component is a multimedia (binary) component.
		/// </summary>
		public bool? MultiMedia { get; set; }
	}

	/// <summary>
	/// A connection to a list of items.
	/// </summary>
	public class CustomMetaConnection
	{
		/// <summary>
		/// a list of edges
		/// </summary>
		public List<CustomMetaEdge> Edges { get; set; }
	}

	/// <summary>
	/// An edge in a connection
	/// </summary>
	public class CustomMetaEdge
	{
		/// <summary>
		/// The item at the end of the edge
		/// </summary>
		public CustomMeta Node { get; set; }

		/// <summary>
		/// cursor marks a unique position or index into the connection
		/// </summary>
		public string Cursor { get; set; }
	}

	/// <summary>
	/// Represents custom metadata.
	/// </summary>
	public class CustomMeta
	{
		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Identifies the item ID of the custom meta.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Identifies the key of the custom meta.
		/// </summary>
		public string Key { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the custom meta.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Identifies the publication ID of the custom meta.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Identifies the value of the custom meta.
		/// </summary>
		public string Value { get; set; }

		/// <summary>
		/// Identifies the value type of the custom meta.
		/// </summary>
		public CustomMetaValueType ValueType { get; set; }
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum CustomMetaValueType
	{
		/// <summary>
		/// STRING
		/// </summary>
		STRING,

		/// <summary>
		/// DATE
		/// </summary>
		DATE,

		/// <summary>
		/// FLOAT
		/// </summary>
		FLOAT,

		/// <summary>
		/// NUMBER
		/// </summary>
		NUMBER,

		UNKNOWN
	}

	/// <summary>
	/// Represents a taxonomy item.
	/// </summary>
	public interface ITaxonomyItem
	{
		/// <summary>
		/// Returns the child taxonomies for the taxonomy.
		/// </summary>
		TaxonomyItemConnection Children { get; set; }

		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Returns the depth (level) of the taxonomy.
		/// </summary>
		int? Depth { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the key of the taxonomy.
		/// </summary>
		string Key { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		int? OwningPublicationId { get; set; }

		/// <summary>
		/// Returns the parent taxonomy of the taxonomy.
		/// </summary>
		ITaxonomyItem Parent { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		int PublicationId { get; set; }

		/// <summary>
		/// Identifies the ID of the taxonomy.
		/// </summary>
		int TaxonomyId { get; set; }

		/// <summary>
		/// Identifies the type of the taxonomy.
		/// </summary>
		TaxonomyType TaxonomyType { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		string UpdatedDate { get; set; }

		/// <summary>
		/// Returns true if the taxonomy has child taxonomies.
		/// </summary>
		bool? HasChildren { get; set; }

		/// <summary>
		/// Returns true if the taxonomy is abstract.
		/// </summary>
		bool? Abstract { get; set; }

		/// <summary>
		/// Returns true if the taxonomy is navigable.
		/// </summary>
		bool? Navigable { get; set; }
	}

	/// <summary>
	/// A connection to a list of items.
	/// </summary>
	public class TaxonomyItemConnection
	{
		/// <summary>
		/// a list of edges
		/// </summary>
		public List<TaxonomyItemEdge> Edges { get; set; }
	}

	/// <summary>
	/// An edge in a connection
	/// </summary>
	public class TaxonomyItemEdge
	{
		/// <summary>
		/// The item at the end of the edge
		/// </summary>
		public ITaxonomyItem Node { get; set; }

		/// <summary>
		/// cursor marks a unique position or index into the connection
		/// </summary>
		public string Cursor { get; set; }
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum TaxonomyType
	{
		/// <summary>
		/// KEYWORD
		/// </summary>
		KEYWORD,

		/// <summary>
		/// CATEGORY
		/// </summary>
		CATEGORY,

		STRUCTUREGROUP
	}

	/// <summary>
	/// A connection to a list of items.
	/// </summary>
	public class BinaryVariantConnection
	{
		/// <summary>
		/// a list of edges
		/// </summary>
		public List<BinaryVariantEdge> Edges { get; set; }
	}

	/// <summary>
	/// An edge in a connection
	/// </summary>
	public class BinaryVariantEdge
	{
		/// <summary>
		/// The item at the end of the edge
		/// </summary>
		public BinaryVariant Node { get; set; }

		/// <summary>
		/// cursor marks a unique position or index into the connection
		/// </summary>
		public string Cursor { get; set; }
	}

	/// <summary>
	/// Represents a variant of a binary component.
	/// </summary>
	public class BinaryVariant
	{
		/// <summary>
		/// Identifies the binary ID of the variant.
		/// </summary>
		public int BinaryId { get; set; }

		/// <summary>
		/// Returns the description of the variant.
		/// </summary>
		public string Description { get; set; }

		/// <summary>
		/// Identifies the binary content URL of the variant.
		/// </summary>
		public string DownloadUrl { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Identifies the path of the variant.
		/// </summary>
		public string Path { get; set; }

		/// <summary>
		/// Identifies the type of the variant.
		/// </summary>
		public string Type { get; set; }

		/// <summary>
		/// Identifies the relative binary content URL of the variant.
		/// </summary>
		public string Url { get; set; }

		/// <summary>
		/// Identifies the variant ID of the variant.
		/// </summary>
		public string VariantId { get; set; }
	}

	/// <summary>
	/// Represents a component which has content.
	/// </summary>
	public interface IContentComponent
	{
		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		int? OwningPublicationId { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		int PublicationId { get; set; }

		/// <summary>
		/// Returns the schema ID for the component.
		/// </summary>
		int? SchemaId { get; set; }

		/// <summary>
		/// Returns the list of taxonomies for the item.
		/// </summary>
		List<ITaxonomyItem> Taxonomies { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		string UpdatedDate { get; set; }

		/// <summary>
		/// Returns true if the component is a multimedia (binary) component.
		/// </summary>
		bool? MultiMedia { get; set; }
	}

	/// <summary>
	/// Represents an item. The root of all content models.
	/// </summary>
	public interface IItem
	{
		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		int? OwningPublicationId { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		int PublicationId { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		string UpdatedDate { get; set; }
	}

	/// <summary>
	/// Represents an Ambient Data Framework claim value.
	/// </summary>
	public class InputClaimValue
	{
		/// <summary>
		/// The claim value type.
		/// </summary>
		public ClaimValueType Type { get; set; }

		/// <summary>
		/// The claim URI.
		/// </summary>
		public string Uri { get; set; }

		/// <summary>
		/// The claim Value.
		/// </summary>
		public string Value { get; set; }
	}

	/// <summary>
	/// Represents the type of claim value.
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	public enum ClaimValueType
	{
		/// <summary>
		/// A string value.
		/// </summary>
		STRING,

		/// <summary>
		/// A date value.
		/// </summary>
		DATE,

		/// <summary>
		/// A float value.
		/// </summary>
		FLOAT,

		/// <summary>
		/// A number value.
		/// </summary>
		NUMBER,

		BOOLEAN
	}

	/// <summary>
	/// Represents a Link.
	/// </summary>
	public class Link
	{
		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Link type.
		/// </summary>
		public LinkType Type { get; set; }

		/// <summary>
		/// Link url.
		/// </summary>
		public string Url { get; set; }
	}

	/// <summary>
	/// Represents the type of link.
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	public enum LinkType
	{
		/// <summary>
		/// A page link.
		/// </summary>
		PAGE,

		/// <summary>
		/// A component link.
		/// </summary>
		COMPONENT,

		/// <summary>
		/// A binary link.
		/// </summary>
		BINARY,

		DYNAMIC_COMPONENT
	}

	/// <summary>
	/// A connection to a list of items.
	/// </summary>
	public class KeywordConnection
	{
		/// <summary>
		/// a list of edges
		/// </summary>
		public List<KeywordEdge> Edges { get; set; }
	}

	/// <summary>
	/// An edge in a connection
	/// </summary>
	public class KeywordEdge
	{
		/// <summary>
		/// The item at the end of the edge
		/// </summary>
		public Keyword Node { get; set; }

		/// <summary>
		/// cursor marks a unique position or index into the connection
		/// </summary>
		public string Cursor { get; set; }
	}

	/// <summary>
	/// Represents a keyword taxonomy item.
	/// </summary>
	public class Keyword : ITaxonomyItem, IItem
	{
		/// <summary>
		/// Returns the child taxonomies for the taxonomy.
		/// </summary>
		public TaxonomyItemConnection Children { get; set; }

		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		public string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		public CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Returns the depth (level) of the taxonomy.
		/// </summary>
		public int? Depth { get; set; }

		/// <summary>
		/// Returns the description of the keyword.
		/// </summary>
		public string Description { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		public string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		public Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the key of the taxonomy.
		/// </summary>
		public string Key { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		public string LastPublishDate { get; set; }

		/// <summary>
		/// Returns the name of the keyword.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		public int? OwningPublicationId { get; set; }

		/// <summary>
		/// Returns the parent taxonomy of the taxonomy.
		/// </summary>
		public ITaxonomyItem Parent { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Identifies the ID of the taxonomy.
		/// </summary>
		public int TaxonomyId { get; set; }

		/// <summary>
		/// Identifies the type of the taxonomy.
		/// </summary>
		public TaxonomyType TaxonomyType { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Returns total number of related items.
		/// </summary>
		public int? TotalRelatedItems { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		public string UpdatedDate { get; set; }

		/// <summary>
		/// Returns true if the taxonomy has child taxonomies.
		/// </summary>
		public bool? HasChildren { get; set; }

		/// <summary>
		/// Returns true if the taxonomy is abstract.
		/// </summary>
		public bool? Abstract { get; set; }

		/// <summary>
		/// Returns true if the taxonomy is navigable.
		/// </summary>
		public bool? Navigable { get; set; }

		/// <summary>
		/// Returns true if the keyword is used for identification.
		/// </summary>
		public bool? UsedForIdentification { get; set; }
	}

	/// <summary>
	/// Represents a component presentation which has a component associated with a template.
	/// </summary>
	public class ComponentPresentation : IContentFragment, IItem
	{
		/// <summary>
		/// Returns the component of the component presentation.
		/// </summary>
		public IContentComponent Component { get; set; }

		/// <summary>
		/// Returns the component template of the component presentation.
		/// </summary>
		public Template ComponentTemplate { get; set; }

		/// <summary>
		/// Returns the content of the component presentation.
		/// </summary>
		public IContent Content { get; set; }

		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		public string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		public CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		public string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		public Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		public string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		public int? OwningPublicationId { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Returns the raw content of the component presentation.
		/// </summary>
		public RawContent RawContent { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		public string UpdatedDate { get; set; }
	}

	/// <summary>
	/// Represents a template.
	/// </summary>
	public class Template : IItem
	{
		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		public string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		public CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		public string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		public Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		public string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the output format of the template.
		/// </summary>
		public string OutputFormat { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		public int? OwningPublicationId { get; set; }

		/// <summary>
		/// Returns the priority of the template.
		/// </summary>
		public int? Priority { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		public string UpdatedDate { get; set; }
	}

	public interface IContent
	{
		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		string Id { get; set; }

		/// <summary>
		/// Identifies the type of the content.
		/// </summary>
		string Type { get; set; }
	}

	/// <summary>
	/// Represents an item with content.
	/// </summary>
	public class RawContent
	{
		/// <summary>
		/// Returns the character set encoding of the string content.
		/// </summary>
		public string CharSet { get; set; }

		/// <summary>
		/// Returns the string content.
		/// </summary>
		public string Content { get; set; }

		/// <summary>
		/// Return content data
		/// </summary>
		public IDictionary Data { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }
	}

	/// <summary>
	/// Represents a fragment of content.
	/// </summary>
	public interface IContentFragment
	{
		/// <summary>
		/// Returns the content of this fragment.
		/// </summary>
		IContent Content { get; set; }

		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		int? OwningPublicationId { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		int PublicationId { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		string UpdatedDate { get; set; }
	}

	/// <summary>
	/// A connection to a list of items.
	/// </summary>
	public class ComponentPresentationConnection
	{
		/// <summary>
		/// a list of edges
		/// </summary>
		public List<ComponentPresentationEdge> Edges { get; set; }
	}

	/// <summary>
	/// An edge in a connection
	/// </summary>
	public class ComponentPresentationEdge
	{
		/// <summary>
		/// The item at the end of the edge
		/// </summary>
		public ComponentPresentation Node { get; set; }

		/// <summary>
		/// cursor marks a unique position or index into the connection
		/// </summary>
		public string Cursor { get; set; }
	}

	/// <summary>
	/// Filter for the componentPresentation root query. When the filter is applied, only the component presentations matching the filter will be in the query result
	/// </summary>
	public class InputComponentPresentationFilter
	{
		/// <summary>
		/// List of filters. Items in the query result will match ALL of the elements of the list
		/// </summary>
		public List<InputComponentPresentationFilter> And { get; set; }

		public InputCustomMetaCriteria CustomMeta { get; set; }

		public InputDateRangeCriteriaImpl DateRange { get; set; }

		public InputKeywordCriteria Keyword { get; set; }

		/// <summary>
		/// List of filters. Items in the query result will match ANY of the elements of the list
		/// </summary>
		public List<InputComponentPresentationFilter> Or { get; set; }

		public InputSchemaCriteria Schema { get; set; }

		public InputTemplateCriteria Template { get; set; }
	}

	public class InputCustomMetaCriteria
	{
		public string Key { get; set; }

		/// <summary>
		/// If not given, defaults to Item
		/// </summary>
		public CriteriaScope Scope { get; set; }

		public string Value { get; set; }

		public CustomMetaValueType ValueType { get; set; }
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum CriteriaScope
	{
		/// <summary>
		/// Publication
		/// </summary>
		Publication,

		/// <summary>
		/// Item
		/// </summary>
		Item,

		ItemInPublication
	}

	public class InputDateRangeCriteriaImpl
	{
		/// <summary>
		/// End date & time
		/// </summary>
		public string End { get; set; }

		/// <summary>
		/// Start date & time
		/// </summary>
		public string Start { get; set; }

		/// <summary>
		/// Date range type
		/// </summary>
		public DateRangeType Type { get; set; }
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum DateRangeType
	{
		/// <summary>
		/// CREATION_DATE
		/// </summary>
		CREATION_DATE,

		/// <summary>
		/// UPDATED_DATE
		/// </summary>
		UPDATED_DATE,

		/// <summary>
		/// INITIAL_PUBLISH_DATE
		/// </summary>
		INITIAL_PUBLISH_DATE,

		LAST_PUBLISH_DATE
	}

	public class InputKeywordCriteria
	{
		/// <summary>
		/// Id of the category. Takes precedence over categoryName, if both are present
		/// </summary>
		public int? CategoryId { get; set; }

		public string CategoryName { get; set; }

		public string Key { get; set; }

		/// <summary>
		/// Id of the keyword. Takes precedence over key, if both are present
		/// </summary>
		public int? KeywordId { get; set; }
	}

	public class InputSchemaCriteria
	{
		/// <summary>
		/// Id of the schema. Takes precedence over title, if both are present
		/// </summary>
		public int? Id { get; set; }

		/// <summary>
		/// Title of the schema.
		/// </summary>
		public string Title { get; set; }
	}

	public class InputTemplateCriteria
	{
		/// <summary>
		/// Id of the template.
		/// </summary>
		public int? Id { get; set; }
	}

	/// <summary>
	/// Represents a typical sort type. When used, the default sorting mechanism (by namespace and by id) is overridden
	/// </summary>
	public class InputSortParam
	{
		public string Key { get; set; }

		public MetadataType KeyType { get; set; }

		/// <summary>
		/// The sort order type.
		/// </summary>
		public SortOrderType Order { get; set; }

		/// <summary>
		/// The item field used for sorting
		/// </summary>
		public SortFieldType SortBy { get; set; }
	}

	/// <summary>
	/// Represents a type of natural sort: descending or ascending
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	public enum SortOrderType
	{
		/// <summary>
		/// A string value
		/// </summary>
		Ascending,

		Descending
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum MetadataType
	{
		/// <summary>
		/// A string value
		/// </summary>
		STRING,

		DATE,

		FLOAT
	}

	/// <summary>
	/// These are the fields that allow sorting
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	public enum SortFieldType
	{
		/// <summary>
		/// CREATION_DATE
		/// </summary>
		CREATION_DATE,

		/// <summary>
		/// INITIAL_PUBLISH_DATE
		/// </summary>
		INITIAL_PUBLISH_DATE,

		/// <summary>
		/// ITEM_ID
		/// </summary>
		ITEM_ID,

		/// <summary>
		/// ITEM_TYPE
		/// </summary>
		ITEM_TYPE,

		/// <summary>
		/// LAST_PUBLISH_DATE
		/// </summary>
		LAST_PUBLISH_DATE,

		/// <summary>
		/// NAMESPACE_ID
		/// </summary>
		NAMESPACE_ID,

		/// <summary>
		/// OWNING_PUBLICATION_ID
		/// </summary>
		OWNING_PUBLICATION_ID,

		/// <summary>
		/// PUBLICATION_ID
		/// </summary>
		PUBLICATION_ID,

		/// <summary>
		/// TITLE
		/// </summary>
		TITLE,

		UPDATED_DATE,

		/// <summary>
		/// CUSTOM_META
		/// </summary>
		CUSTOM_META
	}

	/// <summary>
	/// A connection to a list of items.
	/// </summary>
	public class ItemConnection
	{
		/// <summary>
		/// a list of edges
		/// </summary>
		public List<ItemEdge> Edges { get; set; }
	}

    /// <summary>
    /// A connection to an external item instance.
    /// </summary>
    /// <typeparam name="T">external item type</typeparam>
    public class ExternalItemConnection<T>
    {
        /// <summary>
        /// External item instance.
        /// </summary>
        public T ExternalItem { get; set; }
    }

    /// <summary>
    /// An edge in a connection
    /// </summary>
    public class ItemEdge
	{
		/// <summary>
		/// The item at the end of the edge
		/// </summary>
		public IItem Node { get; set; }

		/// <summary>
		/// cursor marks a unique position or index into the connection
		/// </summary>
		public string Cursor { get; set; }
	}

	/// <summary>
	/// Item filter for the items root query. When the filter is applied, only the items matching the filter will be in the query result
	/// </summary>
	public class InputItemFilter
	{
		/// <summary>
		/// List of filters. Items in the query result will match ALL of the elements of the list
		/// </summary>
		public List<InputItemFilter> And { get; set; }

		public InputCustomMetaCriteria CustomMeta { get; set; }

		/// <summary>
		/// list of item types to be selected
		/// </summary>
		public List<FilterItemType> ItemTypes { get; set; }

		public InputKeywordCriteria Keyword { get; set; }

		/// <summary>
		/// list of namespace IDs
		/// </summary>
		public List<ContentNamespace> NamespaceIds { get; set; }

		/// <summary>
		/// List of filters. Items in the query result will match ANY of the elements of the list
		/// </summary>
		public List<InputItemFilter> Or { get; set; }

		/// <summary>
		/// list of publication IDs
		/// </summary>
		public List<int?> PublicationIds { get; set; }

		public InputSchemaCriteria Schema { get; set; }
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum FilterItemType
	{
		/// <summary>
		/// PUBLICATION
		/// </summary>
		PUBLICATION,

		/// <summary>
		/// COMPONENT
		/// </summary>
		COMPONENT,

		/// <summary>
		/// COMPONENT_TEMPLATE
		/// </summary>
		COMPONENT_TEMPLATE,

		/// <summary>
		/// PAGE
		/// </summary>
		PAGE,

		/// <summary>
		/// PAGE_TEMPLATE
		/// </summary>
		PAGE_TEMPLATE,

		/// <summary>
		/// CATEGORY
		/// </summary>
		CATEGORY,

		KEYWORD
	}

	/// <summary>
	/// Represents a page.
	/// </summary>
	public class Page : IContainer, ITaggable, IItem
	{
		/// <summary>
		/// Returns the items in this container.
		/// </summary>
		public List<IItem> ContainerItems { get; set; }

		/// <summary>
		/// Returns the content in the page.
		/// </summary>
		public IContent Content { get; set; }

		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		public string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		public CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Returns the file name path to the page.
		/// </summary>
		public string FileName { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		public string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		public Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		public string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		public int? OwningPublicationId { get; set; }

		/// <summary>
		/// Returns the template for the page.
		/// </summary>
		public Template PageTemplate { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Returns the raw content in the page.
		/// </summary>
		public RawContent RawContent { get; set; }

		/// <summary>
		/// Returns the list of taxonomies for the item.
		/// </summary>
		public List<ITaxonomyItem> Taxonomies { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		public string UpdatedDate { get; set; }

		/// <summary>
		/// Identifies the URL of the page.
		/// </summary>
		public string Url { get; set; }
	}

	/// <summary>
	/// Represents the type of container.
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	public enum ContainerType
	{
		COMPONENT_PRESENTATION
	}

	/// <summary>
	/// Represents a container for items.
	/// </summary>
	public interface IContainer
	{
		/// <summary>
		/// Returns the items in this container.
		/// </summary>
		List<IItem> ContainerItems { get; set; }
	}

	/// <summary>
	/// Represents a related set of entities.
	/// </summary>
	public interface ITaggable
	{
		/// <summary>
		/// Returns the list of taxonomies for the item.
		/// </summary>
		List<ITaxonomyItem> Taxonomies { get; set; }
	}

	/// <summary>
	/// A connection to a list of items.
	/// </summary>
	public class PageConnection
	{
		/// <summary>
		/// a list of edges
		/// </summary>
		public List<PageEdge> Edges { get; set; }
	}

	/// <summary>
	/// An edge in a connection
	/// </summary>
	public class PageEdge
	{
		/// <summary>
		/// The item at the end of the edge
		/// </summary>
		public Page Node { get; set; }

		/// <summary>
		/// cursor marks a unique position or index into the connection
		/// </summary>
		public string Cursor { get; set; }
	}

	/// <summary>
	/// Represents a publication.
	/// </summary>
	public class Publication : IItem
	{
		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		public string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		public CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		public string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		public Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		public string LastPublishDate { get; set; }

		/// <summary>
		/// Returns the multimedia path for the publication.
		/// </summary>
		public string MultimediaPath { get; set; }

		/// <summary>
		/// Returns the multimedia URL for the publication.
		/// </summary>
		public string MultimediaUrl { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		public int? OwningPublicationId { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Returns the publication key.
		/// </summary>
		public string PublicationKey { get; set; }

		/// <summary>
		/// Returns the publication path.
		/// </summary>
		public string PublicationPath { get; set; }

		/// <summary>
		/// Returns the publication URL.
		/// </summary>
		public string PublicationUrl { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		public string UpdatedDate { get; set; }
	}

	/// <summary>
	/// Represents a publication mapping.
	/// </summary>
	public class PublicationMapping
	{
		/// <summary>
		/// Returns the domain.
		/// </summary>
		public string Domain { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the path.
		/// </summary>
		public string Path { get; set; }

		/// <summary>
		/// Returns the scan depth.
		/// </summary>
		public int? PathScanDepth { get; set; }

		/// <summary>
		/// Returns the port.
		/// </summary>
		public string Port { get; set; }

		/// <summary>
		/// Returns the protocol.
		/// </summary>
		public string Protocol { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }
	}

	/// <summary>
	/// A connection to a list of items.
	/// </summary>
	public class PublicationConnection
	{
		/// <summary>
		/// a list of edges
		/// </summary>
		public List<PublicationEdge> Edges { get; set; }
	}

	/// <summary>
	/// An edge in a connection
	/// </summary>
	public class PublicationEdge
	{
		/// <summary>
		/// The item at the end of the edge
		/// </summary>
		public Publication Node { get; set; }

		/// <summary>
		/// cursor marks a unique position or index into the connection
		/// </summary>
		public string Cursor { get; set; }
	}

	/// <summary>
	/// Represents a filter for a publication query.
	/// </summary>
	public class InputPublicationFilter
	{
		/// <summary>
		/// Represents the query type for the filter.
		/// </summary>
		public ContentFilterQueryType QueryType { get; set; }

		/// <summary>
		/// Represents the value to filter by in the form of 'key=value' pair.
		/// </summary>
		public string Value { get; set; }

		/// <summary>
		/// Represents the custom meta value type for the filter. UNKNOWN not supported. Defaults to 'String', if empty.
		/// </summary>
		public CustomMetaValueType ValueType { get; set; }
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum ContentFilterQueryType
	{
		CUSTOM_META
	}

	/// <summary>
	/// Represents a structure group.
	/// </summary>
	public class StructureGroup : ITaxonomyItem, IItem
	{
		/// <summary>
		/// Returns the child taxonomies for the taxonomy.
		/// </summary>
		public TaxonomyItemConnection Children { get; set; }

		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		public string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		public CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Returns the depth (level) of the taxonomy.
		/// </summary>
		public int? Depth { get; set; }

		/// <summary>
		/// Returns the directory of the structure group.
		/// </summary>
		public string Directory { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		public string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		public Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the key of the taxonomy.
		/// </summary>
		public string Key { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		public string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		public int? OwningPublicationId { get; set; }

		/// <summary>
		/// Returns the parent taxonomy of the taxonomy.
		/// </summary>
		public ITaxonomyItem Parent { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Identifies the ID of the taxonomy.
		/// </summary>
		public int TaxonomyId { get; set; }

		/// <summary>
		/// Identifies the type of the taxonomy.
		/// </summary>
		public TaxonomyType TaxonomyType { get; set; }

		/// <summary>
		/// Returns the title of the structure group.
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		public string UpdatedDate { get; set; }

		/// <summary>
		/// Returns true if the taxonomy has child taxonomies.
		/// </summary>
		public bool? HasChildren { get; set; }

		/// <summary>
		/// Returns true if the taxonomy is abstract.
		/// </summary>
		public bool? Abstract { get; set; }

		/// <summary>
		/// Returns true if the taxonomy is navigable.
		/// </summary>
		public bool? Navigable { get; set; }
	}

	/// <summary>
	/// A connection to a list of items.
	/// </summary>
	public class StructureGroupConnection
	{
		/// <summary>
		/// a list of edges
		/// </summary>
		public List<StructureGroupEdge> Edges { get; set; }
	}

	/// <summary>
	/// An edge in a connection
	/// </summary>
	public class StructureGroupEdge
	{
		/// <summary>
		/// The item at the end of the edge
		/// </summary>
		public StructureGroup Node { get; set; }

		/// <summary>
		/// cursor marks a unique position or index into the connection
		/// </summary>
		public string Cursor { get; set; }
	}

	public class TaxonomySitemapItem : ISitemapItem
	{
		/// <summary>
		/// Classified Items Count
		/// </summary>
		public int? ClassifiedItemsCount { get; set; }

		/// <summary>
		/// Description
		/// </summary>
		public string Description { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Items
		/// </summary>
		public List<ISitemapItem> Items { get; set; }

		/// <summary>
		/// Key
		/// </summary>
		public string Key { get; set; }

		/// <summary>
		/// Original title
		/// </summary>
		public string OriginalTitle { get; set; }

		/// <summary>
		/// The most recent date this item was published.
		/// </summary>
		public string PublishedDate { get; set; }

		/// <summary>
		/// Title
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Type
		/// </summary>
		public string Type { get; set; }

		/// <summary>
		/// URL
		/// </summary>
		public string Url { get; set; }

		/// <summary>
		/// Is Abstract
		/// </summary>
		public bool? Abstract { get; set; }

		/// <summary>
		/// Has Child Nodes
		/// </summary>
		public bool? HasChildNodes { get; set; }

		/// <summary>
		/// Visible
		/// </summary>
		public bool? Visible { get; set; }
	}

	/// <summary>
	/// Sitemap Item
	/// </summary>
	public interface ISitemapItem
	{
		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		string Id { get; set; }

		/// <summary>
		/// Original title
		/// </summary>
		string OriginalTitle { get; set; }

		/// <summary>
		/// The most recent date this item was published.
		/// </summary>
		string PublishedDate { get; set; }

		/// <summary>
		/// Title
		/// </summary>
		string Title { get; set; }

		/// <summary>
		/// Type
		/// </summary>
		string Type { get; set; }

		/// <summary>
		/// URL
		/// </summary>
		string Url { get; set; }

		/// <summary>
		/// Visible
		/// </summary>
		bool? Visible { get; set; }
	}

	/// <summary>
	/// Represents ancestor's behaviour of the sitemap subtree response.
	/// </summary>
	[JsonConverter(typeof(StringEnumConverter))]
	public enum Ancestor
	{
		/// <summary>
		/// By default, do not return ancestors of the given taxonomy node.
		/// </summary>
		NONE,

		INCLUDE
	}

	/// <summary>
	/// Represents a node.
	/// </summary>
	public class Node
	{
		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }
	}

	/// <summary>
	/// Untyped content where all data is available in a Map structure.
	/// </summary>
	public class UntypedContent : IContent
	{
		/// <summary>
		/// Return content data
		/// </summary>
		public IDictionary Data { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Identifies the type of the content.
		/// </summary>
		public string Type { get; set; }
	}

	/// <summary>
	/// Represents a regular component.
	/// </summary>
	public class Component : IContentComponent, IItem
	{
		/// <summary>
		/// Returns the date the item was created.
		/// </summary>
		public string CreationDate { get; set; }

		/// <summary>
		/// Returns the custom meta data for the item.
		/// </summary>
		public CustomMetaConnection CustomMetas { get; set; }

		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Returns the date the item was initially published.
		/// </summary>
		public string InitialPublishDate { get; set; }

		/// <summary>
		/// Identifies the item ID.
		/// </summary>
		public int ItemId { get; set; }

		/// <summary>
		/// Returns the item type of the item.
		/// </summary>
		public Sdl.Tridion.Api.Client.ItemType ItemType { get; set; }

		/// <summary>
		/// Returns the date the item was most recently published.
		/// </summary>
		public string LastPublishDate { get; set; }

		/// <summary>
		/// Identifies the namespace ID of the item.
		/// </summary>
		public ContentNamespace NamespaceId { get; set; }

		/// <summary>
		/// Returns the publication ID of the publication to which this item belongs.
		/// </summary>
		public int? OwningPublicationId { get; set; }

		/// <summary>
		/// Identifies the publication ID of the item.
		/// </summary>
		public int PublicationId { get; set; }

		/// <summary>
		/// Returns the schema ID for the component.
		/// </summary>
		public int? SchemaId { get; set; }

		/// <summary>
		/// Returns the list of taxonomies for the item.
		/// </summary>
		public List<ITaxonomyItem> Taxonomies { get; set; }

		/// <summary>
		/// Returns the title of the item.
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Returns the date the item was updated.
		/// </summary>
		public string UpdatedDate { get; set; }

		/// <summary>
		/// Returns true if the component is a multimedia (binary) component.
		/// </summary>
		public bool? MultiMedia { get; set; }
	}

	public class PageSitemapItem : ISitemapItem
	{
		/// <summary>
		/// Identifies the unique ID of the node.
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Original title
		/// </summary>
		public string OriginalTitle { get; set; }

		/// <summary>
		/// The most recent date this item was published.
		/// </summary>
		public string PublishedDate { get; set; }

		/// <summary>
		/// Title
		/// </summary>
		public string Title { get; set; }

		/// <summary>
		/// Type
		/// </summary>
		public string Type { get; set; }

		/// <summary>
		/// URL
		/// </summary>
		public string Url { get; set; }

		/// <summary>
		/// Visible
		/// </summary>
		public bool? Visible { get; set; }
	}

	/// <summary>
	/// Represents an Ambient Data Framework claim value.
	/// </summary>
	public class ClaimValue
	{
		/// <summary>
		/// The claim value type.
		/// </summary>
		public ClaimValueType Type { get; set; }

		/// <summary>
		/// The claim URI.
		/// </summary>
		public string Uri { get; set; }

		/// <summary>
		/// The claim Value.
		/// </summary>
		public string Value { get; set; }
	}

}
