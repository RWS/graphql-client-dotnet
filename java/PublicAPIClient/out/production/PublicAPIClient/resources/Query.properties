# ItemType Component

ItemType=query items($first: Int $after: String $filter: InputItemFilter! $contextData: [InputClaimValue]) {items(first: $first, after: $after, filter: $filter, contextData: $contextData) { edges {cursor node {...ItemFields ...Fields } } } } fragment ItemFields on Item { id itemId itemType namespaceId owningPublicationId publicationId title lastPublishDate creationDate initialPublishDate updatedDate ...CustomMetaFields } fragment CustomMetaFields on Item { customMetas { edges { node { id itemId key namespaceId publicationId value valueType } } } }

Publication_Component=query publication($namespaceId: Int! $publicationId: Int! $contextData: [InputClaimValue!]) { publication(namespaceId: $namespaceId, publicationId: $publicationId, contextData: $contextData) { ...ItemFields ...PublicationFields } } fragment ItemFields on Item { id itemId itemType namespaceId owningPublicationId publicationId title lastPublishDate creationDate initialPublishDate updatedDate   ...PublicationFields } fragment PublicationFields on Publication { publicationUrl publicationPath multimediaPath multimediaUrl }

Binary_Component=query binaryComponent($namespaceId: Int!, $publicationId: Int!, $cmUri: String, $contextData: [InputClaimValue!]) { binaryComponent(namespaceId: $namespaceId, publicationId: $publicationId, cmUri: $cmUri, contextData: $contextData) { ...ItemFields ...BinaryComponentFields } } fragment BinaryComponentFields on BinaryComponent { schemaId multiMedia variants { edges { node { binaryId path url downloadUrl description variantId } } } } fragment ItemFields on Item { id itemId itemType namespaceId owningPublicationId publicationId title lastPublishDate creationDate initialPublishDate updatedDate ...CustomMetaFields } fragment CustomMetaFields on Item { customMetas { edges { node { id itemId key namespaceId publicationId value valueType } } } }